    (setq constants nil)
    
    (defun run (program &optional (input nil) (memory nil))
        (if (null program) (setq s nil)
            (if (eq (caar program) 'const)
                (if (isMember (car (setq constants (cons (cadar program) constants))) memory)
                    (errorHandler 2)
                    (run (cdr program) input (addMemory (cdar program) memory))
                )
                (if (eq (caar program) 'int)
                    (run (cdr program) input (addMemory (cdar program) memory))
                    (if (eq (caar program) 'main)
                        (execute (nth 1 (car program)) input memory)
                        (errorHandler 1)
                    )
                )
            )
        )
    )

    (defun execute (program input memory &optional (output nil))
        (if (null program) (reverse output)
            (cond
                ((or (eq (caar program) 'cin) (eq (caar program) 'scanf))
                    (execute (cdr program) (cdr input) (assign (nth 1 (car program)) (car input) memory) output)
                )
                ((or (eq (caar program) 'cout) (eq (caar program)'printf))
                    (execute (cdr program) input memory (cons (cout_multiple (cdar program) memory) output))
                )
                ((and (isMember (caar program) constants) (isMember (cadar program) '(++ -- += -= *= /= ==)))
                    (errorHandler 3)
                )
				((isMember (cadar program) '(+= -= *= /= ++ --))
                    (execute (convertir (car program) (cdr program)) input memory output)
                )
                ((isMember (caar program) '(++ --))
                    (execute (cons (reverse (car program)) (cdr program)) input memory output)
                )
                ((eq (cadar program) '=)
                    (execute (cdr program) input (assign (caar program) (value (cddar program) memory) memory) output)
                )
                ((eq (caar program) 'if)
                    (if (eq (value (nth 1 (car program)) memory) 0)
                        (if (eq (length (car program)) 5)
                            (execute (append (nth 4 (car program)) (cdr program)) input memory output)
                            (execute (cdr program) input memory output)
                        )
                        (execute (append (nth 2 (car program)) (cdr program)) input memory output)
                    )
                )
				((eq (caar program) 'do)
                    (execute (append (nth 1 (car program)) (list (append (nth 2 (car program)) (list (nth 1 (car program))))) (cdr program)) input memory output)	
				)
                ((eq (caar program) 'while)
                    (if (eq (value (nth 1 (car program)) memory) 0)
                        (execute (cdr program) input memory output)
                        (execute (append (nth 2 (car program)) program) input memory output)
                    )
                )
            )
        )
    )

    (defun value (expression memory &optional (symbol nil) (operator nil))
        (if (and (atom expression) (not (null expression)))
            (if  (numberp expression) expression
                (find expression memory)
            )
            (if (null expression)
                (if (null symbol) 
                    (if (numberp (car operator)) (car operator) (if (car operator) 1 0))
                    (value expression memory (cdr symbol) (cons (operate (car symbol) (cadr operator) (car operator)) (cddr operator)))
                )
                (if (isSymbol (car expression))
                    (if (null symbol)
                        (value (cdr expression) memory (cons (car expression) symbol) operator)
                        (if (> (weigth (car symbol)) (weigth (car expression)))
                            (value (cdr expression) memory (cons (car expression) symbol) operator)
                            (value (cdr expression) memory (cons (car expression) (cdr symbol)) (cons (operate (car symbol) (car operator) (cadr operator)) (cddr           operator)))
                        )
                    )
                    (value (cdr expression) memory symbol (cons (value (car expression) memory) operator))
                )
          )
        )
    )

	(defun cout_multiple (variables memory)
		(if (null variables) nil
			(cons (value (car variables) memory) (cout_multiple (cdr variables) memory))
        )
	)

    (defun convertir (listHead programTail)
        (if (null listHead)
            nil
            (cond 
                ((eq (cadr listHead) '+=) (cons (cons (car listHead) (cons '= (cons (car listHead) (cons '+ (cddr listHead))))) programTail))
                ((eq (cadr listHead) '-=) (cons (cons (car listHead) (cons '= (cons (car listHead) (cons '- (cddr listHead))))) programTail))
                ((eq (cadr listHead) '/=) (cons (cons (car listHead) (cons '= (cons (car listHead) (cons '/ (cddr listHead))))) programTail))
                ((eq (cadr listHead) '*=) (cons (cons (car listHead) (cons '= (cons (car listHead) (cons '* (cddr listHead))))) programTail))
                ((eq (cadr listHead) '++) (cons (cons (car listHead) (cons '= (cons (car listHead) (cons '+ '(1))))) programTail))
                ((eq (cadr listHead) '--) (cons (cons (car listHead) (cons '= (cons (car listHead) (cons '- '(1))))) programTail))
                (t (errorHandler 5))
            )
        )
    )

    (defun operate (operator operand1 operand2)
        (cond
            ((eq operator '==) (eq operand1 operand2))
            ((eq operator '!=) (not (eq operand1 operand2)))
            ((eq operator '&&) (and operand1 operand2))
            ((eq operator '||) (or operand1 operand2))
            ((eq operator '!) (not operand1))
            (T (apply operator (list operand1 operand2)))
        )
    )

    (defun weigth (symbol)
        (case symbol 
            ('++ 1)
            ('-- 2)
            ('!  3)
            ('*  4)
            ('/  5)
            ('%  6)
            ('+  7)
            ('-  8)
            ('<  9)
            ('<= 10)
            ('>  11)
            ('>= 12)
            ('== 13)
            ('!= 14)
            ('&& 15)
            ('|| 16)
            ('+= 17)
            ('-= 18)
            ('*= 19)
            ('/= 20)
        )
    )

    (defun addMemory (list memory)
        (append (createSublist list) memory)
    )

    (defun createSublist (list)
        (if (null list) nil
            (if (eq (car list) '=)
                (createSublist (cdr list))
                (if (and (not (eq (cadr list) '=)) (symbolp (car list)) (symbolp (cadr list)))
                    (if (isMember (car list) constants)
                        (errorHandler 3)
                        (append
                            (list (car list) 0)
                            (createSublist (cdr list))
                        )
                    )
                    (cons
                        (car list) 
                        (createSublist (cdr list))
                    )
                )
            )
        )
    )

    (defun assign (var value memory)
        (if (null memory) nil
                (if (eq var (car memory))
                    (append (list var value) (assign var  value (cddr memory)))
                    (cons (car memory)(assign var value (cdr memory)))
                )
        )
    )

    (defun find (var memory)
        (if (not (null (index var memory)))
            (nth (+ (index var memory) 1) memory)
            nil
        )
    )

    (defun index (var memory)
        (if (existsMemory var memory) 
            (if (eq (car memory) var) 0
                (+ 1 (index var (cdr memory)))
            )
            nil
        )
    )

    (defun existsMemory (var memory)
        (if (null memory) nil
            (if (eq var (car memory))
                T
                (existsMemory var (cdr memory))
            )
        )
    )

    (defun isSymbol (atom)
        (cond
            ((or (eq atom '+) (eq atom '-) (eq atom '*) (eq atom '/) (eq atom '==) (eq atom '!==) (eq atom '>) (eq atom '>=) (eq atom '<) (eq atom '<=)))
            (t nil)
        )
    )

    (defun isMember (atom list)
        (if (eq atom (car list)) t
            (isMember atom (cdr list))
        )
    )

    (defun errorHandler (code)
        (case code 
            (1 "Main cannot be found")
            (2 "Variable already exists")
            (3 "Constant cannot be modified")
            (4 "Constant cannot be empty")
            (5 "Incorrect operation")
        )
    )

  